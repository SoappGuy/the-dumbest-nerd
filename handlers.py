from utils import *
import time
import emoji
import random
import openai
import re
import config

# –°–ø–∏—Å–æ—á–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤
ADMINS = [921172948,
          740241575]

# –ß–∞—Å –∫–æ–ª–∏ –±—É–ª–æ –∑–∞–ø—É—â–µ–Ω–æ —é–∑–µ—Ä–±–æ—Ç–∞, –ø–æ—Ç—Ä—ñ–±–µ–Ω —â–æ–± —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∫–æ–¥
STARTUP_TIME = time.time()

# –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –µ–º–æ–¥–∂—ñ
emoji_db = list(emoji.EMOJI_DATA.keys())

# API openai
openai.api_key = config.openai_api_hash


async def universal_message_handler(event):
    chat_id = event.chat_id
    message_text = event.text
    sender = event.sender_id
    timestamp = event.date

    # –Ø–∫—â–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—ñ–∫–µ—Ä/“ë—ñ—Ñ/–≤—ñ–¥–µ–æ/—Ç.–¥. –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if message_text != "":

        # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä—É–ø–∏ –∑ –≤–∫–∞–∑–∞–Ω–∏–º chat_id
        save_message_to_db(message_text, sender, timestamp, chat_id)


async def start_command_handler(event):
    create_whitelist_table(event.chat_id)
    create_group_table(event.chat_id)

    await event.respond('Started!')
    await event.respond('–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /help.')


async def help_command_handler(event):
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—É—é —Ç—É—Ç —è–∫–∞ –∫–æ–º–∞–Ω–¥–∞ —â–æ —Ä–æ–±–∏—Ç—å —Ç–∞ —ó—Ö —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (—â–æ–± –Ω–µ –∑–∞–±—É—Ç–∏)

    cmd_list = {
        "/sum": {
            "args": "<n>",
            "help": "–ø—Ä–æ —â–æ –π–¥–µ—Ç—å—Å—è —É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö n –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö —á–∞—Ç—É?",
            "emoji": "‚ÅâÔ∏è"
        },
        "/ping": {
            "args": "",
            "help": "—á–∏ –ø—Ä–∞—Ü—é—î —é–∑–µ—Ä–±–æ—Ç?",
            "emoji": "üèì"
        },
        "/tag_all": {
            "args": "",
            "help": "—Ç–µ–≥–Ω—É—Ç–∏ –≤—Å—ñ—Ö —É —á–∞—Ç—ñ (–Ω–µ —Ä–æ–±–∏ —Ü–µ –ø–æ –ø—Ä–∏–∫–æ–ª—É, –±–æ —Ç–µ–±–µ –≤–±'—é—Ç—å)",
            "emoji": "üîó"
        },
        "/add_wl": {
            "args": "<group>",
            "help": "–Ω–∞–¥–∞—Ç–∏ –ª—é–¥–∏–Ω—ñ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —É —Ü—å–æ–º—É —á–∞—Ç—ñ",
            "emoji": "üîí"
        },
        "/remove_wl": {
            "args": "<group>",
            "help": "–∑–∞–±—Ä–∞—Ç–∏ –≤ –ª—é–¥–∏–Ω–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–µ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —É —Ü—å–æ–º—É —á–∞—Ç—ñ",
            "emoji": "üîí"
        }

    }
    edited_text = "/help:\n"
    m = await event.respond(edited_text, silent=True)
    for key in cmd_list.keys():
        args_ = cmd_list[key]["args"]
        help_ = cmd_list[key]["help"]
        emoji_ = cmd_list[key]["emoji"]

        # —Ö–µ–ª–ø –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –∑–∞ —Ü–∏–º –ø–∞—Ç–µ—Ä–Ω–æ–º, –≤—ñ–Ω —î–¥–∏–Ω–∏–π –¥–ª—è —É—Å—ñ—Ö –∫–æ–º–∞–Ω–¥,
        # —Ü–µ –¥–ª—è —Ç–æ–≥–æ —â–æ–± –Ω–µ —Ç—Ä–µ–±–∞ –±—É–ª–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫–æ–∂–Ω—É –∫–æ–º–∞–Ω–¥—É —è–∫—â–æ –∑–∞—Ö–æ—Ç—ñ–ª–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ç–µ—Ä–Ω
        edited_text += f'{emoji_} `{key} {args_}` - {help_}\n'

        await m.edit(edited_text)
    edited_text += f'\n–¥–æ–∑–≤–æ–ª–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É:\n'

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∞–π—Ç–ª–∏—Å—Ç—É –¥–ª—è —á–∞—Ç—É
    whitelists = get_all_whitelists(event.chat_id)
    for whitelist in whitelists:
        command, user_id = whitelist
        edited_text += f"\n{command} - [{random.choice(emoji_db)}](tg://user?id={user_id})"

        await m.edit(edited_text)

    edited_text += f"\n\n[github](https://github.com/SoappGuy/the-dumbest-nerd)|[author](tg://user?id=921172948)"
    await m.edit(edited_text)


async def add_user_to_whitelist_command_handler(event):
    user_id = event.sender_id
    chat_id = event.chat_id
    args = get_args(event)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —é–∑–µ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏
    if is_user_in_whitelist(chat_id, 'add_wl', user_id) or user_id in ADMINS:

        # –ë–∞–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≥–æ, —â–æ —é–∑–µ—Ä –≤–≤—ñ–≤ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        if len(args) != 0:
            command = args[0]
        else:
            await event.respond('–ü–æ–≤—Ç–æ—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è –Ω–µ —Ä–æ–∑—á—É–≤')
            return

        # –¢—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏
        reply = event.reply_to
        if reply is None:
            await event.respond('–¢—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏')
            return

        # –û—Ç—Ä–∏–º–∞—Ç–∏ id —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏
        reply = await event.client.get_messages(event.chat_id, ids=event.reply_to.reply_to_msg_id)
        user_to_add = int(reply.sender_id)

        # –ù–∞—Ä–µ—à—Ç—ñ –¥–æ–¥–∞—Ç–∏ –¥–æ –≤–∞–π—Ç–ª–∏—Å—Ç—É
        if not is_user_in_whitelist(chat_id, command, user_id):
            add_user_to_whitelist_db(chat_id, command, user_to_add)
            await event.respond(f'‚úÖ[–Æ–∑–µ—Ä–∞](tg://user?id={user_to_add}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ {command}')
        else:
            await event.respond(f'[–Æ–∑–µ—Ä](tg://user?id={user_to_add}) –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ {command}')

    else:

        # –Æ–∑–µ—Ä—É –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É
        await event.respond('–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ —É –¥–æ—Å—Ç—É–ø—ñ')


async def remove_user_from_whitelist_command_handler(event):
    user_id = event.sender_id
    chat_id = event.chat_id
    args = get_args(event)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —é–∑–µ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏
    if is_user_in_whitelist(chat_id, 'remove_wl', user_id) or user_id in ADMINS:

        # –ë–∞–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≥–æ, —â–æ —é–∑–µ—Ä –≤–≤—ñ–≤ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        if len(args) != 0:
            command = args[0]
        else:
            await event.respond('–ü–æ–≤—Ç–æ—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —è –Ω–µ —Ä–æ–∑—á—É–≤')
            return

        # –¢—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
        reply = event.reply_to
        if reply is None:
            await event.respond('–¢—Ä–µ–±–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏')
            return

        # –û—Ç—Ä–∏–º–∞—Ç–∏ id —é–∑–µ—Ä–∞ —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
        reply = await event.client.get_messages(event.chat_id, ids=event.reply_to.reply_to_msg_id)
        user_to_add = int(reply.sender_id)

        # –ù–∞—Ä–µ—à—Ç—ñ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –≤–∞–π—Ç–ª–∏—Å—Ç—É
        if is_user_in_whitelist(chat_id, command, user_id):
            remove_user_from_whitelist_db(chat_id, command, user_to_add)
            await event.respond(f'‚úÖ[–Æ–∑–µ—Ä–∞](tg://user?id={user_to_add}) —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ {command}')
        else:
            await event.respond(f'[–Æ–∑–µ—Ä](tg://user?id={user_to_add}) —ñ —Ç–∞–∫ –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ {command}')

    else:

        # –Æ–∑–µ—Ä—É –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É
        await event.respond('–í—ñ–¥–º–æ–≤–ª–µ–Ω–æ —É –¥–æ—Å—Ç—É–ø—ñ')


async def ping(event):
    global STARTUP_TIME
    answer = time.strftime("%H:%M:%S", time.gmtime(time.time() - STARTUP_TIME))
    await event.respond(f'üèì Pong!\n–Ø –≤–∏–∫–æ–Ω—É—é—Å—å –≤–∂–µ: {answer}!/')


async def tag_all(event):
    user_id = event.sender_id
    chat_id = event.chat_id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∑–≤–æ–ª—É
    if not (is_user_in_whitelist(chat_id, 'tag_all', user_id) or user_id == 921172948):
        await event.respond('–¢–æ–±—ñ –Ω–µ –º–æ–∂–Ω–∞, –∑–∞ –¥–æ–∑–≤–æ–ª–æ–º –∑–≤–µ—Ä–Ω–∏—Å—å –¥–æ –∫–æ–≥–æ—Å—å –∑ –∞–¥–º—ñ–Ω—ñ–≤')
        return

    # –°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –≤–∑—è—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ —á–∞—Ç—É
    user_list = await event.client.get_participants(entity=event.chat_id)
    usernames = []
    for user in user_list:

        # –ë–æ—Ç—ñ–≤ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏ –Ω–∞–º —Ç–µ–≥–∞—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞
        if (not user.bot) and (not user.deleted):

            # —Ü–µ–π —ñ–Ω–ª–∞–π–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —â–æ–± —Ç–µ–≥–∞—Ç–∏ –∑–∞ –∞–π–¥—ñ, –±–æ –Ω–µ —É –≤—Å—ñ—Ö —î —é–∑–µ—Ä–Ω–µ–π–º–∏,
            # —É [] –∑–∞–ø–∏—Å–∞–Ω–æ —è–∫ –Ω–∞–∑–≤–∞—Ç–∏ —Ç–æ–≥–æ –∫–æ–≥–æ —Ç—Ä–µ–±–∞ —Ç–µ–≥–Ω—É—Ç–∏
            # —è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–∞–Ω–¥–æ–º–Ω–µ –µ–º–æ–¥–∂—ñ, –±–æ —á–æ–º—É –± –Ω—ñ
            usernames.append(f'[{random.choice(emoji_db)}](tg://user?id={user.id})')

    # –¢–≥ —Ç–µ–≥–Ω–µ –ª–∏—à–µ –ø–µ—Ä—à—ñ 5 —é–∑–µ—Ä—ñ–≤ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
    # —Ç–æ–º—É —Ç—Ä–µ–±–∞ —Ä–æ–∑–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —à–º–∞—Ç–∫–∏ –ø–æ 5 –ª—é–¥–µ–π
    chunked_usernames = []
    for i in range(0, len(usernames), 5):
        chunked_usernames.append(usernames[i:i + 5])

    # –Ü –Ω–∞—Ä–µ—à—Ç—ñ –ø—ñ–Ω–≥
    for usernames in chunked_usernames:
        await event.respond("/".join(usernames))


async def get_log(event):
    user_id = event.sender_id

    if user_id in ADMINS:
        await event.client.send_file(-1001829214060, "./dumb_log.log")
    else:
        await event.respond('–î—É–º–∞—î—à –Ω–∞–π—Ä–æ–∑—É–º–Ω—ñ—à–∏–π? –¢–æ–±—ñ –Ω–µ –º–æ–∂–Ω–∞.')
        return


async def summarise(event):
    # –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —è–∫–æ–º—É –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    m = await event.respond('Processing ‚è≥..')

    arguments = get_args(event)
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤–∑–∞–≥–∞–ª—ñ, —ñ —è–∫—â–æ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î "100" —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if len(arguments) == 0:
        arguments = ["100"]

    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ–º
    arguments[0] = re.sub(r'[^0-9]', '', arguments[0])
    if arguments[0] == '':
        await m.edit('–¢—Ä–µ–±–∞ —á–∏—Å–ª–æ, –¥–æ–≤–±–∞–Ω—å')
        return

    if int(arguments[0]) <= 50:
        await m.edit('–¢–∏ –¥—É–º–∞—î—à —Ç–∏ –∫—É–º–µ–¥–Ω–∏–π? –ù—ñ, —Ü–µ –Ω–µ —Å–º—ñ—à–Ω–æ.')
        return

    # –∑–±–∏—Ä–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ arguments[0] –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    messages = get_last_n_messages(int(arguments[0]), event.chat_id)

    # –∑–∞–ª–∏—à–∞—î –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ª–∏—à–µ —Ç–µ–∫—Å—Ç
    messages_text = []
    for message in messages:
        if "/" not in message[1]:  # —è–∫—â–æ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —î "/" —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–¥–µ –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å
            messages_text.append(message[1])

    # –ø—Ä–æ–º–ø—Ç –¥–ª—è –¥–∂–∏–ø—ñ—Ç—ñ
    prompt = f"now you will be given messages, your task is to provide list of topics (maximum 10 topics) which was discussed in the conversation, start with the most discussed topics and end with those that were briefly mentioned (do not write about similar topics) (answer in Ukrainian):"
    prompt += "\n".join(messages_text[::-1])

    # —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è API
    messages = []
    messages.append({"role": "user", "content": prompt})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo-16k",  # –±–∞–∂–∞–Ω–∞ –º–æ–¥–µ–ª—å GPT
            messages=messages,
            temperature=0.8,  # —Å—Ç—Ä–æ–≥—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - —á–∏–º –º–µ–Ω—à–µ —Ç–∏–º —Ç–æ—á–Ω—ñ—à–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        )

        # –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        await m.edit(f'sum of {arguments[0]} /\n{response["choices"][0]["message"]["content"]}\n\nTokens used - {response["usage"]["total_tokens"]}')
    except openai.error.ServiceUnavailableError:
        await m.edit(f"—Å–µ—Ä–≤–µ—Ä–∏ openai –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø–µ—Ä–µ–ø—Ä–æ—à—É—é –∑–∞ –Ω–µ–∑—Ä—É—á–Ω–æ—Å—Ç—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ")

